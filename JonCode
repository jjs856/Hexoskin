---
title: "Hexoskin"
author: "Jonathan Slaney"
date: "03/10/2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Necessary packages

```{r}
library(tidyverse)
library(ggmap)
library(lubridate)
library(readr)
library(psych)
```

### Looping over data and creating city and participant columns

```{r}
hexodata_temp <- NULL

hexodata_temp <- dir(path = "C:/Users/jslan/Documents/Graduate Studies/Hexoskin/DatasetsHexoskin/", full.names = TRUE, pattern = "*.csv", recursive = TRUE) %>%
   purrr::map(function(i){
     dfhx <- read.csv(i, header = TRUE)
     dfhx$city <- stringr::str_sub(i, 70, 73)
     dfhx$participants <- stringr::str_sub(i, 87, 88)
     hexodata_temp <- bind_rows(hexodata_temp, dfhx)
   })

hexo_data <- bind_rows(hexodata_temp)
```

### Change column names, create hexo_data and write to csv

```{r}
hexo_data <- hexo_data %>%
  dplyr::rename(
     time = time..s.256., 
     respiratory_rate = breathing_rate..rpm...api.datatype.33.., 
     heart_rate = heart_rate..bpm...api.datatype.19.., 
     minute_ventilation = minute_ventilation..mL.min...api.datatype.36.., 
     cadence = cadence..spm...api.datatype.53.., 
     activity_g = activity..g...api.datatype.49..,
  )
```

### Delete useless columns

```{r}
hexo_data <- subset(hexo_data, select = -minute_ventilation..L.min...api.datatype.36..)
hexo_data <- subset(hexo_data, select = -sleep_position..NA...api.datatype.270..)
hexo_data <- subset(hexo_data, select = -X)
hexo_data <- subset(hexo_data, select = -time)
```

### Add participant individual level data

```{r}
participants <- read_csv("C:/Users/jslan/Documents/Graduate Studies/Hexoskin/Hexoskin_participants.csv")
participants <- participants %>%
  dplyr::rename(
     participants = participant_code
  )
hexo_data_complete <- inner_join(hexo_data, participants, by = "participants")

write.csv(hexo_data_complete, "hexo_data.csv") ## Saving so that I do not break my computer when working on this data! 
```

### Make new minute level variable (minute) in hexo_data_complete

```{r}
hexo_data_complete$a <- ymd_hm(hexo_data_complete$DATETIME) # Produces NA when format is not "%m/%d/%Y"
hexo_data_complete$b <- ymd_hms(hexo_data_complete$DATETIME) # Produces NA when format is not "%d.%m.%Y"
hexo_data_complete$a[is.na(hexo_data_complete$a)] <- hexo_data_complete$b[!is.na(hexo_data_complete$b)] # Combine both while keeping their ranks

#hexo_data_complete$newDATETIME <- ymd_hms(hexo_data_complete$DATETIME)
hexo_data_complete$minute <- floor_date(hexo_data_complete$a, "minute")
```

### Group by minute

```{r}
hxd <- hexo_data_complete %>%
                  group_by(participants, minute) %>% 
                    summarize(
                      rr = mean(respiratory_rate, na.rm = TRUE),
                      hr = mean(heart_rate, na.rm = TRUE),
                      ve = mean(minute_ventilation, na.rm = TRUE), 
                      g = sum(activity_g, na.rm = TRUE),
                      dob = first(dob),
                      city = first(city), 
                      height = first(height_cm), 
                      mass = first(mass_kg), 
                      sex = first(sex)
                    )

hxd$ve_L <- hxd$ve/1000
```

### Descriptives (for heart rate, breathing) psych package describe function

```{r}
describe(hxd$hr)
```
### Histograms by city 

### Boxplots by city

### Linear regressions by participant

### scatterplot for predictor and outcome

### Calculate R^2


### Fit linear regression to participants

```{r}
cor_hexo_all <- ggplot(hxd, aes(x = hr, y = ve_L)) + 
                  geom_point(size = 0.1) + 
   geom_smooth(method='lm', formula = y ~ x) + 
   facet_wrap(~ participants)
plot(cor_hexo_all)
```

### Fit linear regression to all data

```{r}
cor_hexo_full <- ggplot(hxd, aes(x = hr, y = ve_L)) + 
                  geom_point(size = 0.1) + 
    geom_smooth(method='glm', formula = y ~ x)
plot(cor_hexo_full)
```

Find heart rates

```{r}
max_hr <- hxd %>%
  group_by(participants) %>%
  summarise(
         maxhr = max(hr),
  )
```

Make max HR col, convert to percent O2, make VO% relative as absolute value, bind

```{r}
hxd_VO <- NULL
hxd_VO$percentmaxhr <- NULL

hxd_VO <- hxd %>%
   mutate(
     hxd$hrmax <- max(hxd$hr),
     hxd_VO$percentmaxhr <- ((hr/hrmax)*100),
     hxd_VO$VO <- ((percentmaxhr-37.182)/0.6483),
     hxd_VO <- bind_rows(hxd, hxd_VO)
   )

hexo_data <- bind_rows(hxd_VO)
```


Categorize VO by METs

```{r}

MET <- hxd_VO %>%
  mutate(METs = case_when(
  VO <= 3.5 ~ "1", 
  VO > 3.6 & VO < 7.0 ~ "2",
  VO > 7.1 & VO < 10.5 ~ "3",
  VO > 10.6 & VO < 14.0 ~ "4",
  VO > 14.1 & VO < 17.5 ~ "5",
  VO > 17.6 & VO < 21.0 ~ "6",
  VO > 21.1 & VO < 24.5 ~ "7", 
  VO > 24.6 & VO < 28.0 ~ "8", 
  VO > 28.1 & VO < 31.5 ~ "9", 
  VO > 31.6 & VO < 35.0 ~ "10", 
  VO > 35.1 & VO < 38.5 ~ "11", 
  VO > 38.6 & VO < 42.0 ~ "12", 
  VO > 42.1 & VO < 45.5 ~ "13", 
  VO > 45.6 & VO < 49.0 ~ "14", 
  VO >= 49.1 ~ "15"
  ))

```



